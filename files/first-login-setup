#!/bin/sh

# Exit if not running interactively
[ -t 0 ] || exit 0

# Exit if setup is already done
[ -f /etc/first_login_done ] && exit 0

# Create debug log
echo "First login setup script started" > /tmp/first_login_debug.log

. /lib/functions/network.sh

network_is_up() {
    if ip route show default | grep -q .; then
        return 0  # True, network is up
    else
        return 1  # False, network is down
    fi
}

# Function to wait for network
wait_for_network() {
    local max_attempts=60
    local attempt=0

    echo "Starting network check..."

    while [ $attempt -lt $max_attempts ]; do
        echo "Attempt $((attempt + 1)) of $max_attempts" > /tmp/network_setup.md
        
        if network_is_up; then
            echo "Network is up according to network_is_up()" > /tmp/network_setup.md
            
            if ping -c 1 8.8.8.8 >/dev/null 2>&1; then
                echo "Ping to 8.8.8.8 successful" > /tmp/network_setup.md
                return 0
            else
                echo "Ping to 8.8.8.8 failed" > /tmp/network_setup.md
            fi
        else
            echo "Network is not up according to network_is_up()" > /tmp/network_setup.md
        fi
        
        sleep 1
        attempt=$((attempt + 1))
    done

    echo "Max attempts reached, network check failed"
    return 1
}

verify_wifi_connection() {
    local max_attempts=30
    local attempt=0

    while [ $attempt -lt $max_attempts ]; do
        if iwinfo | grep -q "ESSID: \"$ssid\""; then
            echo "Connected to $ssid"
            return 0
        fi
        sleep 1
        attempt=$((attempt + 1))
    done

    echo "Failed to connect to $ssid"
    return 1
}

# Check if script is running interactively
is_interactive() {
    [ -t 0 ] && [ -t 1 ]
}

setup_vpn() {
    echo "Setting up VPN."
    /etc/./setup_vpn.sh
    echo "VPN setup complete. Starting VPN."
    /etc/./startup_vpn.sh
}

setup_opennds() {
    echo "Disabling ipv6."
    /root/./disable_ipv6.sh
    echo "Setting up opennds."
    /root/./enable_opennds.sh
}

reset_lan_interface() {
    echo "Resetting LAN interface..."
    
    # Identify the LAN interface
    LAN_INTERFACE=$(uci get network.lan.device)
    
    echo "Bringing down $LAN_INTERFACE..."
    ifconfig $LAN_INTERFACE down
    
    # Wait a moment
    sleep 5
    
    echo "Bringing up $LAN_INTERFACE..."
    ifconfig $LAN_INTERFACE up
    
    # Wait for network to be ready
    echo "Waiting for network to stabilize..."
    sleep 10
    
    # Restart DHCP server
    echo "Restarting DHCP server..."
    /etc/init.d/dnsmasq restart
    
    # Restart network
    echo "Restarting network..."
    /etc/init.d/network restart
    
    # Restart firewall
    echo "Restarting firewall..."
    /etc/init.d/firewall restart
    
    echo "LAN interface reset complete."
}

handle_dhcp_lease() {
    local max_attempts=3
    local attempt=0

    while [ $attempt -lt $max_attempts ]; do
        echo "Attempt $((attempt + 1)) of $max_attempts"
        
        if prompt_user_and_wait_for_dhcp; then
            update_json "dhcp_lease_obtained" "true"
            echo "DHCP lease obtained successfully."
            return 0
        fi
        
        attempt=$((attempt + 1))
        
        if [ $attempt -lt $max_attempts ]; then
            echo "Attempt $attempt failed. Please try again."
        fi
    done

    echo "Failed to obtain DHCP lease after $max_attempts attempts. Rebooting the router..."
    update_json "reboot_reason" "DHCP lease not obtained after $max_attempts attempts"
    update_json "dhcp_lease_obtained" "false"
    sync  # Ensure all pending writes to disk are completed
    reboot  # Reboot the router
    exit 1  # Exit the script (this line will only be reached if reboot fails)
}

prompt_user_and_wait_for_dhcp() {
    echo "Please follow these steps:"
    echo "1. Unplug the Ethernet cable from your router"
    echo "2. Wait for 5 seconds"
    echo "3. Plug the Ethernet cable back into your router"
    echo "Waiting for DHCP lease..."
    
    local max_wait=30
    for i in $(seq 1 $max_wait); do
        if [ -s /tmp/dhcp.leases ]; then
            echo "DHCP lease detected!"
            return 0
        fi
        sleep 1
        echo -n "."
    done

    echo "Failed to detect DHCP lease. Please try again."
    return 1
}

setup_wifi() {
    # WiFi setup loop
    while true; do
        # Prompt for WiFi credentials
        echo "Enter WiFi gateway SSID:"
        read ssid
        update_json "wifi_ssid" "$ssid"

        echo "Enter WiFi gateway Password:"
        read -s password
        update_json "wifi_password" "$password"

        # Update WiFi configuration
        /etc/./create_gateway.sh "$ssid" "$password"
        
        echo "Restarting network..."
        /etc/init.d/network restart

        # Wait for network to be ready
        echo "Waiting for network to be ready..."
        if wait_for_network; then
            # Check connectivity
            if ping -c 4 8.8.8.8 >/dev/null 2>&1; then
                echo "WiFi setup successful!"

                if ! base64 --version &>/dev/null; then
                    opkg update && opkg install coreutils-base64 &
                fi

           	/www/cgi-bin/./generate_keys.sh

                # Update JSON with WiFi details
                update_json "wifi_ssid" "$ssid"
                update_json "wifi_setup" "true"
                update_json "wifi_connected" "true"
                break
            else
                echo "Failed to connect. Please try again."
                update_json "wifi_connected" "false"
            fi
        else
            echo "Failed to connect. Please try again."
            update_json "wifi_connected" "false"
        fi
    done
}

# Function to create or update JSON file
update_json() {
    local key="$1"
    local value="$2"
    local json_file="/root/user_inputs.json"

    if [ ! -f "$json_file" ]; then
        echo "{}" > "$json_file"
    fi

    # Use jq if available, otherwise use sed
    if command -v jq >/dev/null 2>&1; then
        jq --arg key "$key" --arg value "$value" '.[$key] = $value' "$json_file" > "$json_file.tmp" && mv "$json_file.tmp" "$json_file"
    else
        sed -i "s/$.*$\}/\1,\"$key\":\"$value\"}/" "$json_file"
        if [ $? -ne 0 ]; then
            # If sed fails (e.g., empty file), create a new JSON object
            echo "{\"$key\":\"$value\"}" > "$json_file"
        fi
    fi
}

if [ ! -f /etc/first_login_done ]; then
    if is_interactive; then
	update_json "script_started" "$(date)"
        echo "First login setup script started" > /tmp/first_login_debug.log
        echo "Interactive: $(is_interactive)" >> /tmp/first_login_debug.log
        echo "first_login_done exists: $([ -f /etc/first_login_done ] && echo 'yes' || echo 'no')" >> /tmp/first_login_debug.log

        # Prompt user to set a password
        echo "Please set a password for the router:"
        passwd
        update_json "password_set" "true"

	# Prompt for LNURL
        echo "Enter the LNURL you would like to receive payouts on:"
        read lnurl
        update_json "payout_lnurl" "$lnurl"

        # Setup WiFi
        setup_wifi
        if verify_wifi_connection; then
	    # setup_vpn
            setup_opennds
	    echo "Running dhcp_lease_fix.sh..."
	    /root/./dhcp_lease_fix.sh
	    touch /etc/first_login_done
            handle_dhcp_lease
        else
            update_json "setup_failed" "true"
            echo "WiFi setup failed. Please try again later."
        fi

    else
        # Non-interactive mode: Set default password and skip WiFi setup
        echo "Password not set. Please set it upon first login."
        update_json "password_set" "false"
        update_json "wifi_setup" "false"
    fi
fi

echo "First login setup completed" >> /tmp/first_login_debug.log
