#!/bin/sh /etc/rc.common

START=99
STOP=15

USE_PROCD=1
PROG=/bin/sh

hotspot_interface="radio0"

start_service() {
    procd_open_instance
    procd_set_param command $PROG -c '
cat << "EOF" | sh
        # Function to get the hotspot SSID
        get_hotspot_ssid() {
            if [ -f "/nostr/shell/nostr_keys.json" ]; then
                npub=$(jq -r ".npub_hex" /nostr/shell/nostr_keys.json 2>/dev/null)
                if [ -n "$npub" ] && [ "$npub" != "null" ]; then
                    echo "TollGate_${npub:0:8}"
                    return
                fi
            fi
            
            # Fallback to MAC address if npub is not available
            mac_address=$(cat /sys/class/ieee80211/phy0/macaddress | sed "s/://g")
            echo "TollGate_${mac_address}"
        }

        # Function to check network status
        check_network() {
            ping -c 1 8.8.8.8 >/dev/null 2>&1
        }

        # Function to restart network and wait for it to be ready
        restart_network() {
            echo "Restarting network..."
            /etc/init.d/network restart
	    service openvpn restart
            
            local max_attempts=30
            local attempt=1
            while [ $attempt -le $max_attempts ]; do
                if check_network; then
                    echo "Network is up after $attempt seconds"
                    return 0
                fi
                echo "Waiting for network to come up (attempt $attempt/$max_attempts)..."
                sleep 1
                attempt=$((attempt + 1))
            done
            
            echo "Network did not come up after $max_attempts seconds"
            return 1
        }

        hotspot_ssid=$(get_hotspot_ssid)

        # Set the SSID
        uci set wireless.default_radio0.ssid="$hotspot_ssid"
        uci commit wireless

        while true; do
            echo "Checking conditions at $(date)"
            if check_network; then
                echo "Internet is available"
            else
                echo "Internet is not available"
                if restart_network; then
                    echo "Network successfully restarted"
                else
                    echo "Failed to restart network"
                fi
            fi

            if ndsctl json >/dev/null 2>&1; then
                echo "OpenNDS is responsive"
            else
                echo "OpenNDS is not responsive"
            fi

            current_status=$(uci get wireless.default_radio0.disabled)
            echo "Current WiFi status: $([ "$current_status" = "0" ] && echo "Enabled" || echo "Disabled")"

            if check_network && ndsctl json >/dev/null 2>&1; then
                if [ "$current_status" != "0" ]; then
                    echo "Internet and OpenNDS are available. Turning on WiFi hotspot."
                    uci set wireless.default_radio0.disabled=0
                    uci commit wireless
                    wifi up
                else
                    echo "WiFi hotspot is already on and Internet and OpenNDS are available."
                fi
            else
                if [ "$current_status" != "1" ]; then
                    echo "Internet or OpenNDS is not available. Turning off WiFi hotspot."
                    uci set wireless.default_radio0.disabled=1
                    uci commit wireless
                    wifi down
                else
                    echo "WiFi hotspot is already off and Internet or OpenNDS is not available."
                fi
            fi
            sleep 60
        done
EOF
    '
    procd_set_param respawn
    procd_close_instance
}

service_triggers() {
    procd_add_reload_trigger "network" "wireless"
}
